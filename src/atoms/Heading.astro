---
const
    {
        level, text, size, uppercase, lowercase, weight, tighten, loosen, color, nowrap, italic,
        class: classes, ...attrs
    } = Astro.props
---
<div
    { ...attrs }
    class:list={[
        `h is-${ level ? level : 'span' }`,

        // Font Sizes
        size === 'sm' && 'text-xs lg:text-sm',
        size === 'md' && 'text-xl sm:text-2xl',
        size === 'mdx' && 'text-3xl leading-10 md:text-4xl md:leading-tight lg:text-5xl lg:leading-tight',
        size === 'lg' && 'text-3xl sm:text-4xl md:text-5xl md:leading-tight lg:text-7xl',
        size === 'lgx' && 'text-4xl sm:text-6xl lg:text-7xl xl:text-8xl',
        size === 'xl' && 'text-5xl leading-tight sm:text-7xl sm:!leading-[1.112] md:text-8xl lg:text-9xl',

        // Font Weights
        weight === 'regular' && 'font-normal',
        weight === 'medium' && 'font-medium',
        weight === 'semi' && 'font-semibold',
        weight === 'bold' && 'font-bold',
        weight === 'extra' && 'font-extrabold',

        // Colors
        color === 'accent' && 'text-accent-500',
        color === 'primary' && 'text-primary-950',
        color === 'white' && 'text-white',

        // Booleans
        uppercase && 'uppercase',
        lowercase && 'lowercase',
        tighten && '-tracking-wide',
        loosen && 'tracking-widest',
        nowrap && 'whitespace-nowrap',
        italic && 'italic',

        // Classes Passed In
        classes
    ]}>
    {() => {
        switch (level) {
            case 'h1': return <h1>{ text }</h1>
            case 'h2': return <h2>{ text }</h2>
            case 'h3': return <h3>{ text }</h3>
            case 'p': return <p>{ text }</p>
            default: return <span>{ text }</span>
        }
    }}
</div>