---
import { getCollection, render } from 'astro:content'
import Base from '@layouts/Base.astro'
import Work from '@composites/Work.astro'
import Backbar from '@layouts/Backbar.astro'
import { _paths } from '@scripts/utils/pathworx'
import Child from '@layouts/Child.astro'
import { components } from '@scripts/components/components'
import { getCollection } from 'astro:content'

export async function getStaticPaths() {
	const collections = ['pages', 'work', 'blog']
	const allCollections = await Promise.all(
		collections.map((collection) => getCollection(collection)),
	)

	return allCollections
		.flatMap((entries, index) =>
			entries.map((entry) => ({
				params: { slug: slug(entry, collections[index]) },
				props: { entry },
			})),
		)
		.filter((route) => route.params.slug !== undefined)

	function slug(entry, collection) {
		if (collection === 'pages') {
			if (entry.id === 'pages/home') return '/'
			return entry.id.replace(/^pages\//, '')
		} else if (collection === 'work') return entry.data.id ? `work/${entry.data.id}` : undefined
		else return entry.id
	}
}

const { entry } = Astro.props
const { Content } = await render(entry)
const { pathname } = Astro.url
const { isCollection, isCollectionChild, collection, collectionParent } =
	_paths(Astro.url)
const isTimelines = pathname.startsWith('/timelines')
---

<Base data={entry.data}>
	{(isCollection() || isCollectionChild()) && !isTimelines && <Backbar />}
	{
		isCollectionChild() ? (
			<Child Content={Content} entry={entry} components={components} />
		) : (
			<Content components={components} />
		)
	}
</Base>
