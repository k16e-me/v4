---
import Section from '@layouts/Section.astro'
import Wrapper from '@layouts/Wrapper.astro'
import Prose from '@atoms/Prose.astro'
import Image from '@atoms/Image.astro'
import Chip from '@atoms/Chip.astro'
import Image from '@atoms/Image.astro'
import kb from '@images/avatars/kb.jpg'
import Text from '@atoms/Text.astro'
import Accordion from '@blocks/Accordion.astro'
import { _empty } from '@scripts/utils/snips'
import { getCollection } from 'astro:content'
import Markdown from '@blocks/Markdown.astro'
import { _sortTasksByStatus } from '@scripts/utils/sort-tasks'
import { formatDate } from '@scripts/utils/date'

const {
	title,
	padding = 'bottom',
	tag = 'section',
	image,
	timeline,
	class: classes,
	...props
} = Astro.props
const { pathname } = Astro.url
const category = pathname.split('/').filter(Boolean).pop()
const allTasks = await getCollection('tasks')
const tasks = allTasks.filter((i) => category && i.id.includes(`/${category}/`))
const sorted = _sortTasksByStatus(tasks)
---

<Section
	tag={tag}
	component='tasks'
	title={title}
	padding={padding}
	class:list='invisible'
	data-entry='below'>
	<Wrapper>
		<ul
			class='col-span-full sm:col-start-2 sm:col-end-12 xl:col-start-3 xl:col-end-11 divide-y divide-[var(--color-ruler)] flex flex-col gap-y-10 [&>*]:pb-11'>
			{
				sorted.map(
					({
						data: {
							title,
							summary,
							start,
							duration,
							days,
							owner,
							status,
							details,
						},
					}) => (
						<li>
							<div class='grid grid-cols-4 gap-4'>
								<div class='[grid-area:1/1/2/4]'>
									<div class='space-y-0.5 pr-3'>
										<Text
											tag='h3'
											content={title}
											size='xl'
											color='strong'
											weight='bold'
										/>
										<Text
											content={summary}
											tag='p'
											size='base'
											dim
										/>
									</div>
									<div class='grid grid-cols-2 md:grid-cols-4 items-center gap-4 gap-y-5 mt-6 pr-2'>
										<div class='space-y-0.5 flex flex-col'>
											<Text
												content={'Start'}
												size='sm'
												dimmer
											/>
											<Text
												content={formatDate(start)}
												datetime={start.toISOString()}
												tag='time'
												size='base'
												color='strong'
												dim
											/>
										</div>
										<div class='space-y-0.5'>
											<Text
												content={'Duration'}
												size='sm'
												dimmer
											/>
											<Text
												content={duration}
												tag='p'
												size='base'
												color='strong'
												dim
											/>
										</div>
										{days && (
											<div class='space-y-0.5'>
												<Text
													content={'Days'}
													size='sm'
													dimmer
												/>
												<Text
													content={days}
													tag='p'
													size='base'
													color='strong'
													dim
												/>
											</div>
										)}
										<div class='space-y-0.5'>
											<div class='flex gap-2 items-center [&>*:first-child]:shrink-0'>
												<Image
													filename={owner.image}
													alt={owner.title}
													avatar
													width='64'
													height='64'
												/>
												<Text
													content={owner.title}
													tag='p'
													size='base'
													color='strong'
													dim
												/>
											</div>
										</div>
									</div>
								</div>
								<div class='[grid-area:1/4/2/5] justify-self-end pt-3'>
									<Chip
										text={status}
										class='w-auto'
										theme={
											status === 'progress'
												? 'positive'
												: status === 'slated'
													? 'neutral'
													: status === 'review'
														? 'review'
														: status === 'done'
															? 'success'
															: status ===
																  'blocked'
																? 'error'
																: 'default'
										}
									/>
								</div>
							</div>
							{
								/* Accordion of more... */
								!_empty(details) && (
									<ul class='mt-6 px-4 py-1 rounded-xl bg-[var(--color-elevation)]'>
										{details.map(({ title, body }) => (
											<Accordion heading={title}>
												<Markdown
													content={body}
													post='minimal'
												/>
											</Accordion>
										))}
									</ul>
								)
							}
						</li>
					),
				)
			}
		</ul>
	</Wrapper>
</Section>
